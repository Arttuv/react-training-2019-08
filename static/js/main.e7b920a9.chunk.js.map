{"version":3,"sources":["common/Common.js","gallery/GlorifiedGallery.js","photodetails/GlorifiedPhoto.js","App.js","serviceWorker.js","index.js"],"names":["TopNavbar","props","Navbar","id","variant","fixed","Container","Row","Col","Brand","href","Nav","activePage","className","aria-selected","Link","window","location","responseLinkParse","require","SimplePagination","pagination","hasOwnProperty","type","onClick","nextPage","LightboxFooter","currentView","modalProps","open","src","to","GlorifiedGallery","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","fetchedPhotos","setFetchedPhotos","setPagination","page","setPage","fetchingData","setFetchingData","error","setError","openLightbox","useCallback","event","photo","index","getRandomInt","max","Math","floor","random","useEffect","a","fetch","then","response","links","headers","get","json","data","converted","map","item","newObject","url","width","height","title","albumid","concat","catch","console","fetchPhotos","role","photos","direction","class","name","message","onClose","components","Footer","currentIndex","views","x","srcset","srcSet","caption","previousPage","GlorifiedPhoto","photoDetails","setPhotoDetails","match","params","getPhotoInfo","alt","App","basename","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7b920a9.chunk.js","sourcesContent":["import React, {Link} from 'react';\nimport {Col, Container, Nav, Navbar, Row} from 'react-bootstrap';\nimport \"./Common.css\";\n/**\n * Shows breadcrumb-style navigation.\n * \n * @param {activePage} props \n */\nfunction TopNavbar(props) {\n  \n    return (\n        <Navbar id=\"main-navigation\" variant=\"light\" fixed=\"top\">\n            <Container>\n                <Row>\n                    <Col>\n                        <Navbar.Brand href=\"#\">PhotoApp</Navbar.Brand>\n                    </Col>\n                    <Col>\n                        <Nav>\n                            {props.activePage==='photos' ? \n                                <a href=\"#\" className=\"nav-link active-page-link\" aria-selected=\"true\">Photos</a>\n                            : \n                                <a href=\"#\" className=\"nav-link\" aria-selected=\"false\">Photos</a>\n                            }\n                            {props.activePage==='photo' ? \n                                <Nav.Link className=\"active-page-link\" href={window.location.href}>Details</Nav.Link>\n                            : null}\n                        </Nav>\n                    </Col>\n                </Row>\n            </Container>\n        </Navbar>\n    );\n  }\n\n  export default TopNavbar;","import React, {useState, useCallback, useEffect} from 'react';\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport {FaAngleDoubleDown, FaShareSquare, FaInfo} from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport TopNavbar from \"../common/Common\";\n\nconst responseLinkParse = require('parse-link-header');\n\n/**\n * Gallery view.\n * \n * @param {} props \n */\nfunction GlorifiedGallery(props) {\n    const [currentImage, setCurrentImage] = useState(0);\n    const [viewerIsOpen, setViewerIsOpen] = useState(false);\n    const [fetchedPhotos, setFetchedPhotos] = useState(null);\n    const [pagination, setPagination] = useState(null);\n    const [page, setPage] = useState(1);\n    const [fetchingData, setFetchingData] = useState(false);\n    const [error, setError] = useState(null);\n  \n    const openLightbox = useCallback((event, { photo, index }) => {\n      setCurrentImage(index);\n      setViewerIsOpen(true);\n    }, []);\n  \n    const closeLightbox = () => {\n      setCurrentImage(0);\n      setViewerIsOpen(false);\n    };\n  \n    const nextPage = () => {\n      setPage(page + 1);\n    }\n  \n    const previousPage = () => {\n      setPage(page - 1);\n    }\n  \n    function getRandomInt(max) {\n      return Math.floor(Math.random() * Math.floor(max));\n    }\n    \n    /**\n     * useEffect-hook for background data fetch.\n     */\n    useEffect(() => {\n     const fetchPhotos = async() => {\n      setFetchingData(true);\n      fetch('https://jsonplaceholder.typicode.com/photos/' + '?_page=' + page + '&limit=12')\n      .then(response => {\n        \n        var links = responseLinkParse(response.headers.get('Link'));\n        setPagination(links);\n        return response.json();\n      })\n      .then((data) => { \n          var converted = data.map(item => {\n            var newObject = {};\n            newObject['src'] = item.url;\n            var width = getRandomInt(1) + 1;\n            var height = getRandomInt(1) + 1;\n  \n            newObject.width = width;\n            newObject.height = height;\n            newObject.title = item.title;\n            newObject.id = item.id;\n            newObject.albumid = item.albumid;\n            return newObject;\n          });\n  \n          if(fetchedPhotos) {\n            setFetchedPhotos(fetchedPhotos.concat(converted));\n          } else {\n            setFetchedPhotos(converted);\n          }\n          setFetchingData(false);\n      })\n      .catch(error => {\n          console.error('Error:', error)\n          setError(error);\n      })\n        \n      \n    };\n  \n    fetchPhotos();\n  \n    }, [page, setFetchedPhotos]);\n  \n    return (\n      <div>\n        <TopNavbar activePage='photos'/>\n        <main role=\"main\" className=\"container\">\n          {fetchedPhotos != null ? <Gallery photos={fetchedPhotos} direction={\"row\"} onClick={openLightbox} /> : <h1>Loading...</h1>}\n          {error != null ? \n            <div className=\"bg-danger\">\n            < h2 class=\"bg-danger\">Error: {error.name}</h2> \n            <p>{error.message}</p>\n            </div>\n          : null}\n          <ModalGateway>\n            {viewerIsOpen ? (\n              <Modal onClose={closeLightbox}>\n                <Carousel\n                  components={{Footer: LightboxFooter}}\n                  currentIndex={currentImage}\n                  views={fetchedPhotos.map(x => ({\n                    ...x,\n                    srcset: x.srcSet,\n                    caption: x.title\n                  }))}\n                />\n              </Modal>\n            ) : null}\n          </ModalGateway>\n          {!fetchingData ? <SimplePagination pagination={pagination} nextPage={nextPage} previousPage={previousPage} /> : null }\n        </main>\n      </div>\n    );\n  }\n  \n  /**\n   * Simple pagination to be used to fetch new photos.\n   * \n   * Must be given a function which does the fetching.\n   * \n   * @param {props.nextPage} props \n   */\n  function SimplePagination(props) {\n    return (  \n      <nav>\n        {props.pagination != null ?\n  \n          <div className=\"container-fluid w-100 d-flex justify-content-center\">\n            \n            {props.pagination.hasOwnProperty('next') ? \n              <button type=\"button\" className=\"btn btn btn-outline-primary align-middle button-with-margin shadow-sm\" onClick={props.nextPage}>\n                <FaAngleDoubleDown />\n              </button>\n              :\n              <button type=\"button\" className=\"btn btn btn-outline-primary disabled button-with-margin shadow-sm\">\n                <FaAngleDoubleDown />\n              </button>}\n          </div>\n          : null}\n        </nav>\n    );\n  }\n\n/**\n * Footer to be used in lightbox view.\n * \n * @param {currentView, } param0 \n */\nconst LightboxFooter = ({ currentView, modalProps }) => {\n\n    return (\n      <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n      \n        <button type=\"button\" className=\"button-with-margin btn btn btn-outline-primary align-middle shadow-sm\" onClick={() => {\n          window.open(currentView.src)}}>\n          <FaShareSquare />\n        </button>\n       \n  \n        <Link to={\"/photo/\" + currentView.id} className=\"btn button-with-margin btn-outline-primary shadow-sm\"><FaInfo/></Link>\n  \n      </div>);\n  }\n  \n\n  export default GlorifiedGallery;","import React, {useState, useEffect} from 'react';\nimport TopNavbar from \"../common/Common\";\n\n/**\n * Component to show a single photo with detailed info. Should get the \n * id of the photo as a parameter.\n * @param {props.mathc.params.id} props \n */\nfunction GlorifiedPhoto(props) {\n    const [photoDetails, setPhotoDetails] = useState(null);\n    const [error, setError] = useState(null);\n    /**\n     * useEffect-hook for background data fetch.\n     */\n    useEffect(() => {\n      const getPhotoInfo = async() => {\n       fetch('https://jsonplaceholder.typicode.com/photos/' + props.match.params.id)\n       .then(response => {\n         return response.json();\n       })\n       .then((data) => { \n          var newObject = {};\n          newObject.id = data['id'];\n          newObject.url = data['url'];\n          newObject.title = data['title'];\n          setPhotoDetails(newObject);\n       })\n       .catch(error => {\n         console.error('Error:', error);\n         setError(error);\n       });\n     };\n  \n     getPhotoInfo();\n  \n    }, [setPhotoDetails, props.match.params.id]);\n   \n    return (\n        <div>\n          <TopNavbar activePage=\"photo\"/>\n          {photoDetails != null ? (\n  \n            <main role=\"main\" className=\"container photo-details\">\n              <div className=\"card mb-3\">\n                <div className=\"row no-gutters\">\n                  <div className=\"col-md-8\">\n                    <img src={photoDetails.url} className=\"card-img\" alt={photoDetails.title} />\n                  </div>\n                  <div className=\"col-md-4\">\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">{photoDetails.title}</h5>\n                      <p className=\"card-text\">Link to <a href={photoDetails.url}>original</a></p>\n                      <p className=\"card-text\">Link to <a href={window.location.href}>details view</a></p>\n                      <p className=\"card-text\"><small className=\"text-muted\">Photo-id: {photoDetails.id}</small></p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n  \n            </main>\n          ) : <h1>Loading...</h1>}\n          {error != null ? \n            <div className=\"bg-danger\">\n            < h2 class=\"bg-danger\">Error: {error.name}</h2> \n            <p>{error.message}</p>\n            </div>\n          : null}\n  \n        </div>\n    );\n  }\n\n  export default GlorifiedPhoto;","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport GlorifiedGallery from \"./gallery/GlorifiedGallery\";\nimport GlorifiedPhoto from \"./photodetails/GlorifiedPhoto\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch >\n        <Route exact path=\"/\" component={GlorifiedGallery} />\n        <Route path=\"/photo/:id\" component={GlorifiedPhoto}/>\n      </Switch>\n    </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}