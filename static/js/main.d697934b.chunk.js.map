{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TopNavbar","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","activePage","GlorifiedPhoto","useState","setId","setUrl","setTitle","photoDetails","setPhotoDetails","console","log","useEffect","a","fetch","match","params","then","response","json","data","newObject","url","title","getPhotoInfo","role","src","onClick","window","open","location","NewCustomFooter","currentView","modalProps","to","GlorifiedGallery","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","fetchedPhotos","setFetchedPhotos","pagination","setPagination","page","setPage","openLightbox","useCallback","event","photo","index","links","require","parse","headers","get","converted","map","item","max","size","Math","floor","random","albumid","concat","fetchPhotos","photos","onClose","components","Footer","currentIndex","views","x","srcset","srcSet","caption","SimplePagination","nextPage","previousPage","hasOwnProperty","App","basename","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d697934b.chunk.js","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport { render } from \"react-dom\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport './App.css';\nimport { BrowserRouter, HashRouter, Switch, Route, Link } from \"react-router-dom\";\nimport {FaAngleDoubleDown, FaLink, FaShareSquare, FaInfo} from \"react-icons/fa\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch >\n        <Route exact path=\"/\" component={GlorifiedGallery} />\n        <Route path=\"/photo/:id\" component={GlorifiedPhoto}/>\n      </Switch>\n    </HashRouter>\n    );\n}\n\nfunction TopNavbar(props) {\n  \n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n    <a className=\"navbar-brand\" href=\"#\">PhotoApp</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n\n      {(props.activePage) ? \n      <ul className=\"navbar-nav mr-auto\">\n          \n          {props.activePage=='photos' ? \n            <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">Photos <span className=\"sr-only\">(current)</span></a>\n            </li>\n          : \n          <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">Photos <span className=\"sr-only\">(current)</span></a>\n            </li>\n          }\n          \n          {props.activePage=='photo' ? \n            <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">Photo Details<span className=\"sr-only\">(current)</span></a>\n            </li>\n          : null}\n        </ul>\n       : null}\n\n      </div>  \n    </nav>\n  );\n}\n\nfunction GlorifiedPhoto(props) {\n\n  const [id, setId] = useState(null);\n  const [url, setUrl] = useState(null);\n  const [title, setTitle] = useState(null);\n\n  const [photoDetails, setPhotoDetails] = useState(null);\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  console.log(\"Glorified photo\");\n  console.log(props);\n  \n  useEffect(() => {\n    const getPhotoInfo = async() => {\n     fetch('https://jsonplaceholder.typicode.com/photos/' + props.match.params.id)\n     .then(response => {\n       return response.json();\n     })\n     .then((data) => { \n        console.log(data);\n        var newObject = {};\n        newObject['id'] = data['id'];\n        newObject['url'] = data['url'];\n        newObject['title'] = data['title'];\n        setPhotoDetails(newObject);\n        setId(newObject.id);\n        setUrl(newObject.url);\n        setTitle(newObject.title);\n        \n     })\n   };\n\n   getPhotoInfo();\n\n  }, []);\n \n  return (\n      <div>\n        <TopNavbar activePage=\"photo\"/>\n        \n        {photoDetails != null ? (\n\n          <main role=\"main\" className=\"container h100\">\n            <div className=\"row justify-content-center\">\n              <div className=\"col justify-content-center\">\n                <h1>{photoDetails.title}</h1>\n                <div className=\"w-100 justify-content-center\">\n                <img className=\"img-responsive mw-100 mx-auto d-block\" src={photoDetails.url}></img>\n                </div>\n                <div className=\"container-fluid w-100 d-flex justify-content-center\">\n                  <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => window.open(photoDetails.url)}>\n                    <FaLink />\n                  </button>\n                  <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => window.open(window.location.href)}>\n                    <FaShareSquare />\n                  </button>\n                  </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                \n                  </div>\n              </div>\n              </div>\n          </main>\n\n        ) : null}\n      </div>\n  );\n}\n\nconst NewCustomFooter = ({ currentView, modalProps }) => {\n\n  return (\n    <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n      <span className=\"text-light\">{currentView.title}</span>\n      <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => {\n        console.log(currentView);\n        console.log(modalProps);\n        window.open(currentView.src)}}>\n        <FaShareSquare />\n      </button>\n  \n      <Link to={\"/photo/\" + currentView.id}>Details 3</Link>\n\n    </div>);\n}\n\nfunction GlorifiedGallery(props) {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [fetchedPhotos, setFetchedPhotos] = useState(null);\n  const [pagination, setPagination] = useState(null);\n  const[ page, setPage] = useState(1);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  const nextPage = () => {\n    setPage(page + 1);\n  }\n\n  const previousPage = () => {\n    setPage(page - 1);\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  useEffect(() => {\n   const fetchPhotos = async() => {\n    fetch('https://jsonplaceholder.typicode.com/photos/' + '?_page=' + page + '&limit=12')\n    .then(response => {\n      var parse = require('parse-link-header');\n      var links = parse(response.headers.get('Link'));\n      setPagination(links);\n      return response.json();\n    })\n    .then((data) => { \n        var converted = data.map(item => {\n          var newObject = {};\n          newObject['src'] = item.url;\n          var size = getRandomInt(3) + 1;\n          newObject['width'] = size;\n          newObject['height'] = size;\n          newObject['title'] = item.title;\n          newObject['id'] = item.id;\n          newObject['albumid'] = item.albumid;\n          return newObject;\n        });\n        console.log(data);\n        console.log(converted);\n        //(fetchedPhotos == null) ? setFetchedPhotos(converted) : setFetchedPhotos(fetchedPhotos.push(converted));\n        if(fetchedPhotos == null) {\n          setFetchedPhotos(converted);\n        } else {\n          setFetchedPhotos(fetchedPhotos.concat(converted));\n        }\n        //setFetchedPhotos(fetchPhotos);\n    })\n  };\n\n  fetchPhotos();\n\n  }, [page]);\n\n  return (\n    <div>\n      <TopNavbar activePage='photos'/>\n      <main role=\"main\" className=\"container\">\n        {fetchedPhotos != null ? (\n        <Gallery photos={fetchedPhotos} onClick={openLightbox} />\n        ) : null}\n        <ModalGateway>\n          {viewerIsOpen ? (\n            <Modal onClose={closeLightbox}>\n              <Carousel\n                components={{Footer: NewCustomFooter}}\n                currentIndex={currentImage}\n                views={fetchedPhotos.map(x => ({\n                  ...x,\n                  srcset: x.srcSet,\n                  caption: x.title\n                }))}\n              />\n            </Modal>\n          ) : null}\n        </ModalGateway>\n        <SimplePagination pagination={pagination} nextPage={nextPage} previousPage={previousPage} />\n      </main>\n    </div>\n  );\n}\n\nfunction SimplePagination(props) {\n  return (  \n    <nav>\n      {props.pagination != null ?\n\n        <div className=\"container-fluid w-100 d-flex justify-content-center\">\n          \n          {props.pagination.hasOwnProperty('next') ? \n            <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={props.nextPage}>\n              <FaAngleDoubleDown />\n            </button>\n            :\n            <button type=\"button\" className=\"btn btn btn-outline-primary disabled\">\n              <FaAngleDoubleDown />\n            </button>}\n        </div>\n        : null}\n      </nav>\n  );\n}\n\nfunction PaginationNext(props) {\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}