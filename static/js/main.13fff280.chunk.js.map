{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlorifiedPhoto","props","useState","photoDetails","setPhotoDetails","console","log","useEffect","a","searchParams","URLSearchParams","window","location","search","fetch","get","then","response","json","data","newObject","getPhotoInfo","id","NewCustomFooter","currentView","modalProps","className","title","type","onClick","open","src","to","pathname","state","GlorifiedGallery","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","fetchedPhotos","setFetchedPhotos","pagination","setPagination","page","setPage","openLightbox","useCallback","event","photo","index","photoURL","links","require","parse","headers","converted","map","item","url","max","size","Math","floor","random","albumId","concat","fetchPhotos","photos","onClose","components","Footer","currentIndex","views","x","srcset","srcSet","caption","SimplePagination","nextPage","previousPage","hasOwnProperty","App","exact","path","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6fAmBA,SAASA,EAAeC,GAAQ,IAAD,EAEWC,mBAAS,MAFpB,mBAEtBC,EAFsB,KAERC,EAFQ,KA4B7B,OAtBAC,QAAQC,IAAIL,GACZM,oBAAU,YACU,sCAAG,4BAAAC,EAAA,qDACbC,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QAC1DC,MAAM,+CAAiDL,EAAaM,IAAI,OACvEC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAACG,GACJd,QAAQC,IAAIa,GACZ,IAAIC,EAAY,GAChBA,EAAS,GAASD,EAAI,GACtBC,EAAS,IAAUD,EAAI,IACvBC,EAAS,MAAYD,EAAI,MACzBf,EAAgBgB,KAZC,yCAAH,qDAgBnBC,IAEE,IAGD,6BACE,6CACiB,MAAhBlB,EACD,4BAAKA,EAAamB,IACd,MAMV,IAAMC,EAAkB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAEtC,OACE,yBAAKC,UAAU,mEACb,0BAAMA,UAAU,cAAcF,EAAYG,OAC1C,4BAAQC,KAAK,SAASF,UAAU,2CAA2CG,QAAS,WAClFxB,QAAQC,IAAIkB,GACZnB,QAAQC,IAAImB,GACZd,OAAOmB,KAAKN,EAAYO,OACxB,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAMC,GAAI,CACRC,SAAU,SACVC,MAAO,CACLZ,GAAIE,EAAYF,MAHpB,WAMA,4BAAQM,KAAK,SAASC,QAAS,WAC7BlB,OAAOmB,KAAK,aAAeN,EAAYF,MADzC,qBAMN,SAASa,EAAiBlC,GAAQ,IAAD,EACSC,mBAAS,GADlB,mBACxBkC,EADwB,KACVC,EADU,OAESnC,oBAAS,GAFlB,mBAExBoC,EAFwB,KAEVC,EAFU,OAGWrC,mBAAS,MAHpB,mBAGxBsC,EAHwB,KAGTC,EAHS,OAIKvC,mBAAS,MAJd,mBAIxBwC,EAJwB,KAIZC,EAJY,OAKPzC,mBAAS,GALF,mBAKxB0C,EALwB,KAKlBC,EALkB,KAOzBC,EAAeC,sBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDb,EAAgBa,GAChBX,GAAgB,IACf,IA2DH,OArCAhC,oBAAU,YACQ,sCAAG,sBAAAC,EAAA,qDACnBM,MAAMb,EAAMkD,SAAW,UAAYP,EAAO,aACzC5B,KAAK,SAAAC,GACJ,IACImC,EADQC,EAAQ,IACRC,CAAMrC,EAASsC,QAAQxC,IAAI,SAEvC,OADA4B,EAAcS,GACPnC,EAASC,SAEjBF,KAAK,SAACG,GACH,IAAIqC,EAAYrC,EAAKsC,IAAI,SAAAC,GACvB,IAAItC,EAAY,GAChBA,EAAS,IAAUsC,EAAKC,IACxB,IApBcC,EAoBVC,GApBUD,EAoBU,EAnBvBE,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMH,IAmBV,GAM7B,OALAxC,EAAS,MAAYyC,EACrBzC,EAAS,OAAayC,EACtBzC,EAAS,MAAYsC,EAAK/B,MAC1BP,EAAS,GAASsC,EAAKpC,GACvBF,EAAS,QAAcsC,EAAKO,QACrB7C,IAETf,QAAQC,IAAIa,GACZd,QAAQC,IAAIkD,GAGVf,EADkB,MAAjBD,EACgBgB,EAEAhB,EAAc0B,OAAOV,MA1BzB,yCAAH,qDAgClBW,IAEG,CAACvB,IAGF,6BACoB,MAAjBJ,EACD,kBAAC,IAAD,CAAS4B,OAAQ5B,EAAeX,QAASiB,IACrC,KACJ,kBAAC,IAAD,KACGR,EACC,kBAAC,IAAD,CAAO+B,QAhEO,WACpBhC,EAAgB,GAChBE,GAAgB,KA+DR,kBAAC,IAAD,CACE+B,WAAY,CAACC,OAAQhD,GACrBiD,aAAcpC,EACdqC,MAAOjC,EAAciB,IAAI,SAAAiB,GAAC,O,qVAAA,IACrBA,EADqB,CAExBC,OAAQD,EAAEE,OACVC,QAASH,EAAE/C,aAIf,MAGN,kBAACmD,EAAD,CAAkBpC,WAAYA,EAAYqC,SAzE7B,WACflC,EAAQD,EAAO,IAwEiDoC,aArE7C,WACnBnC,EAAQD,EAAO,OA0EnB,SAASkC,EAAiB7E,GACxB,OACE,6BACuB,MAApBA,EAAMyC,WAEL,yBAAKhB,UAAU,uDAEZzB,EAAMyC,WAAWuC,eAAe,QAC/B,4BAAQrD,KAAK,SAASF,UAAU,2CAA2CG,QAAS5B,EAAM8E,UACxF,kBAAC,IAAD,OAGF,4BAAQnD,KAAK,SAASF,UAAU,wCAC9B,kBAAC,IAAD,QAGJ,MASKwD,MAjMf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAS,SAACpF,GAAD,OAAU,kBAACkC,EAAD,iBAAsBlC,EAAtB,CAA6BkD,SAAU,qDAChF,kBAAC,IAAD,CAAOiC,KAAK,SAASE,UAAWtF,MCDlBuF,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASC,MACvB,2DCXNC,IAASL,OACL,kBAAC,EAAD,MAASM,SAASC,eAAe,SDyH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAAAgF,GACjCA,EAAaC,gB","file":"static/js/main.13fff280.chunk.js","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport { render } from \"react-dom\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {FaShareSquare} from \"react-icons/fa\";\nimport {FaAngleDoubleDown} from \"react-icons/fa\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" render ={(props)=> <GlorifiedGallery {...props} photoURL={'https://jsonplaceholder.typicode.com/photos/'} />} />\n      <Route path=\"/photo\" component={GlorifiedPhoto}/>\n\n    </Router>\n    );\n}\n\nfunction GlorifiedPhoto(props) {\n\n  const [photoDetails, setPhotoDetails] = useState(null);\n  /**\n   * useEffect-hook for background data fetch.\n   */\n  console.log(props);\n  useEffect(() => {\n    const getPhotoInfo = async() => {\n      const searchParams = new URLSearchParams(window.location.search);\n     fetch('https://jsonplaceholder.typicode.com/photos/' + searchParams.get('id'))\n     .then(response => {\n       return response.json();\n     })\n     .then((data) => { \n        console.log(data);\n        var newObject = {};\n        newObject['id'] = data['id'];\n        newObject['url'] = data['url'];\n        newObject['title'] = data['title'];\n        setPhotoDetails(newObject);\n     })\n   };\n\n   getPhotoInfo();\n\n  }, []);\n \n  return (\n    <div>\n      <h1>Photo Details</h1>\n      {photoDetails != null ? (\n      <h1>{photoDetails.id}</h1>\n      ) : null}\n    </div>\n\n  );\n}\n\nconst NewCustomFooter = ({ currentView, modalProps }) => {\n\n  return (\n    <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n      <span className=\"text-light\">{currentView.title}</span>\n      <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => {\n        console.log(currentView);\n        console.log(modalProps);\n        window.open(currentView.src)}}>\n        <FaShareSquare />\n      </button>\n      <Link to={{\n        pathname: '/photo',\n        state: {\n          id: currentView.id\n        }\n      }}>Details</Link>\n      <button type=\"button\" onClick={() => {\n        window.open(\"/photo?id=\" + currentView.id);\n      }}>Another details</button>\n    </div>);\n}\n\nfunction GlorifiedGallery(props) {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [fetchedPhotos, setFetchedPhotos] = useState(null);\n  const [pagination, setPagination] = useState(null);\n  const[ page, setPage] = useState(1);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  const nextPage = () => {\n    setPage(page + 1);\n  }\n\n  const previousPage = () => {\n    setPage(page - 1);\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  useEffect(() => {\n   const fetchPhotos = async() => {\n    fetch(props.photoURL + '?_page=' + page + '&limit=12')\n    .then(response => {\n      var parse = require('parse-link-header');\n      var links = parse(response.headers.get('Link'));\n      setPagination(links);\n      return response.json();\n    })\n    .then((data) => { \n        var converted = data.map(item => {\n          var newObject = {};\n          newObject['src'] = item.url;\n          var size = getRandomInt(3) + 1;\n          newObject['width'] = size;\n          newObject['height'] = size;\n          newObject['title'] = item.title;\n          newObject['id'] = item.id;\n          newObject['albumId'] = item.albumId;\n          return newObject;\n        });\n        console.log(data);\n        console.log(converted);\n        //(fetchedPhotos == null) ? setFetchedPhotos(converted) : setFetchedPhotos(fetchedPhotos.push(converted));\n        if(fetchedPhotos == null) {\n          setFetchedPhotos(converted);\n        } else {\n          setFetchedPhotos(fetchedPhotos.concat(converted));\n        }\n        //setFetchedPhotos(fetchPhotos);\n    })\n  };\n\n  fetchPhotos();\n\n  }, [page]);\n\n  return (\n    <div>\n      {fetchedPhotos != null ? (\n      <Gallery photos={fetchedPhotos} onClick={openLightbox} />\n      ) : null}\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              components={{Footer: NewCustomFooter}}\n              currentIndex={currentImage}\n              views={fetchedPhotos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n      \n      <SimplePagination pagination={pagination} nextPage={nextPage} previousPage={previousPage} />\n\n    </div>\n  );\n}\n\nfunction SimplePagination(props) {\n  return (  \n    <nav>\n      {props.pagination != null ?\n\n        <div className=\"container-fluid w-100 d-flex justify-content-center\">\n          \n          {props.pagination.hasOwnProperty('next') ? \n            <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={props.nextPage}>\n              <FaAngleDoubleDown />\n            </button>\n            :\n            <button type=\"button\" className=\"btn btn btn-outline-primary disabled\">\n              <FaAngleDoubleDown />\n            </button>}\n        </div>\n        : null}\n      </nav>\n  );\n}\n\nfunction PaginationNext(props) {\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}