{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlorifiedPhoto","props","useState","setId","setUrl","setTitle","photoDetails","setPhotoDetails","console","log","useEffect","a","URLSearchParams","window","location","search","fetch","match","params","id","then","response","json","data","newObject","url","title","getPhotoInfo","NewCustomFooter","currentView","modalProps","className","type","onClick","open","src","to","pathname","state","GlorifiedGallery","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","fetchedPhotos","setFetchedPhotos","pagination","setPagination","page","setPage","openLightbox","useCallback","event","photo","index","links","require","parse","headers","get","converted","map","item","max","size","Math","floor","random","albumid","concat","fetchPhotos","photos","onClose","components","Footer","currentIndex","views","x","srcset","srcSet","caption","SimplePagination","nextPage","previousPage","hasOwnProperty","App","basename","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9b2e05d.chunk.js","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport { render } from \"react-dom\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport './App.css';\nimport { BrowserRouter, HashRouter, Switch, Route, Link } from \"react-router-dom\";\nimport {FaShareSquare} from \"react-icons/fa\";\nimport {FaAngleDoubleDown} from \"react-icons/fa\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/\">\n      <Switch >\n        <Route exact path=\"/\" component={GlorifiedGallery} />\n        <Route path=\"/photo/:id\" component={GlorifiedPhoto}/>\n      </Switch>\n    </BrowserRouter>\n    );\n}\n\nfunction GlorifiedPhoto(props) {\n\n  const [id, setId] = useState(null);\n  const [url, setUrl] = useState(null);\n  const [title, setTitle] = useState(null);\n\n  const [photoDetails, setPhotoDetails] = useState(null);\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  console.log(\"Glorified photo\");\n  console.log(props);\n  useEffect(() => {\n    const getPhotoInfo = async() => {\n      const searchParams = new URLSearchParams(window.location.search);\n     //fetch('https://jsonplaceholder.typicode.com/photo/' + searchParams.get('id'))\n     fetch('https://jsonplaceholder.typicode.com/photos/' + props.match.params.id)\n     .then(response => {\n       return response.json();\n     })\n     .then((data) => { \n        console.log(data);\n        var newObject = {};\n        newObject['id'] = data['id'];\n        newObject['url'] = data['url'];\n        newObject['title'] = data['title'];\n        setPhotoDetails(newObject);\n        setId(newObject.id);\n        setUrl(newObject.url);\n        setTitle(newObject.title);\n     })\n   };\n\n   getPhotoInfo();\n\n  }, []);\n \n  return (\n    <div>\n      <h1>Photo Details</h1>\n      {photoDetails != null ? (\n      <h1>{photoDetails.id}</h1>\n      ) : null}\n    </div>\n\n  );\n}\n\nconst NewCustomFooter = ({ currentView, modalProps }) => {\n\n  return (\n    <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n      <span className=\"text-light\">{currentView.title}</span>\n      <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => {\n        console.log(currentView);\n        console.log(modalProps);\n        window.open(currentView.src)}}>\n        <FaShareSquare />\n      </button>\n      \n      <Link to={{\n        pathname: '/photo',\n        state: {\n          id: currentView.id\n        }\n      }}>Details 1</Link>\n      \n      <Link to=\"/photo\" params={{id: currentView.id}}>Details 2</Link>\n      <Link to={\"/photo/\" + currentView.id}>Details 3</Link>\n\n    </div>);\n}\n\nfunction GlorifiedGallery(props) {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [fetchedPhotos, setFetchedPhotos] = useState(null);\n  const [pagination, setPagination] = useState(null);\n  const[ page, setPage] = useState(1);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  const nextPage = () => {\n    setPage(page + 1);\n  }\n\n  const previousPage = () => {\n    setPage(page - 1);\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  useEffect(() => {\n   const fetchPhotos = async() => {\n    fetch('https://jsonplaceholder.typicode.com/photos/' + '?_page=' + page + '&limit=12')\n    .then(response => {\n      var parse = require('parse-link-header');\n      var links = parse(response.headers.get('Link'));\n      setPagination(links);\n      return response.json();\n    })\n    .then((data) => { \n        var converted = data.map(item => {\n          var newObject = {};\n          newObject['src'] = item.url;\n          var size = getRandomInt(3) + 1;\n          newObject['width'] = size;\n          newObject['height'] = size;\n          newObject['title'] = item.title;\n          newObject['id'] = item.id;\n          newObject['albumid'] = item.albumid;\n          return newObject;\n        });\n        console.log(data);\n        console.log(converted);\n        //(fetchedPhotos == null) ? setFetchedPhotos(converted) : setFetchedPhotos(fetchedPhotos.push(converted));\n        if(fetchedPhotos == null) {\n          setFetchedPhotos(converted);\n        } else {\n          setFetchedPhotos(fetchedPhotos.concat(converted));\n        }\n        //setFetchedPhotos(fetchPhotos);\n    })\n  };\n\n  fetchPhotos();\n\n  }, [page]);\n\n  return (\n    <div>\n      {fetchedPhotos != null ? (\n      <Gallery photos={fetchedPhotos} onClick={openLightbox} />\n      ) : null}\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              components={{Footer: NewCustomFooter}}\n              currentIndex={currentImage}\n              views={fetchedPhotos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n      \n      <SimplePagination pagination={pagination} nextPage={nextPage} previousPage={previousPage} />\n\n    </div>\n  );\n}\n\nfunction SimplePagination(props) {\n  return (  \n    <nav>\n      {props.pagination != null ?\n\n        <div className=\"container-fluid w-100 d-flex justify-content-center\">\n          \n          {props.pagination.hasOwnProperty('next') ? \n            <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={props.nextPage}>\n              <FaAngleDoubleDown />\n            </button>\n            :\n            <button type=\"button\" className=\"btn btn btn-outline-primary disabled\">\n              <FaAngleDoubleDown />\n            </button>}\n        </div>\n        : null}\n      </nav>\n  );\n}\n\nfunction PaginationNext(props) {\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}