{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NewCustomFooter","currentView","modalProps","className","type","onClick","console","log","window","open","src","GlorifiedGallery","props","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","fetchedPhotos","setFetchedPhotos","pagination","setPagination","page","setPage","openLightbox","useCallback","event","photo","index","useEffect","a","fetch","photoURL","then","response","links","require","parse","headers","get","json","data","converted","map","item","newObject","url","max","size","Math","floor","random","concat","fetchPhotos","photos","onClose","components","Footer","currentIndex","views","x","srcset","srcSet","caption","title","SimplePagination","nextPage","previousPage","hasOwnProperty","App","path","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03c784b5.chunk.js","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport { render } from \"react-dom\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport {FaShareSquare} from \"react-icons/fa\";\nimport {FaAngleDoubleDown} from \"react-icons/fa\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" render ={(props)=> <GlorifiedGallery {...props} photoURL={'https://jsonplaceholder.typicode.com/photos/'} />} />\n    </Router>\n    );\n}\n\nconst CustomFooter = ({ innerProps, isModal }) => isModal ? (\n  <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n    <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => window.open('http://www.google.fi')}>\n      <FaShareSquare />\n    </button>\n  </div>\n) : null;\n\nconst NewCustomFooter = ({ currentView, modalProps }) => {\n\n  return (\n    <div className=\"container-fluid w-100 d-flex justify-content-center text-center\">\n      <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={() => {\n        console.log(currentView);\n        console.log(modalProps);\n        window.open(currentView.src)}}>\n        <FaShareSquare />\n      </button>\n    </div>);\n}\n\nfunction GlorifiedGallery(props) {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const [fetchedPhotos, setFetchedPhotos] = useState(null);\n  const [pagination, setPagination] = useState(null);\n  const[ page, setPage] = useState(1);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  const nextPage = () => {\n    setPage(page + 1);\n  }\n\n  const previousPage = () => {\n    setPage(page - 1);\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n  /**\n   * useEffect-hook for background data fetch.\n   */\n  useEffect(() => {\n   const fetchPhotos = async() => {\n    fetch(props.photoURL + '?_page=' + page + '&limit=12')\n    .then(response => {\n      var parse = require('parse-link-header');\n      var links = parse(response.headers.get('Link'));\n      setPagination(links);\n      return response.json();\n    })\n    .then((data) => { \n        var converted = data.map(item => {\n          var newObject = {};\n          newObject['src'] = item.url;\n          var size = getRandomInt(3) + 1;\n          newObject['width'] = size;\n          newObject['height'] = size;\n          return newObject;\n        });\n        console.log(data);\n        console.log(converted);\n        //(fetchedPhotos == null) ? setFetchedPhotos(converted) : setFetchedPhotos(fetchedPhotos.push(converted));\n        if(fetchedPhotos == null) {\n          setFetchedPhotos(converted);\n        } else {\n          setFetchedPhotos(fetchedPhotos.concat(converted));\n        }\n        //setFetchedPhotos(fetchPhotos);\n    })\n  };\n\n  fetchPhotos();\n\n  }, [page]);\n\n  return (\n    <div>\n      {fetchedPhotos != null ? (\n      <Gallery photos={fetchedPhotos} onClick={openLightbox} />\n      ) : null}\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              components={{Footer: NewCustomFooter}}\n              currentIndex={currentImage}\n              views={fetchedPhotos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n      \n      <SimplePagination pagination={pagination} nextPage={nextPage} previousPage={previousPage} />\n\n    </div>\n  );\n}\n\nfunction SimplePagination(props) {\n  return (  \n    <nav>\n      {props.pagination != null ?\n\n        <div className=\"container-fluid w-100 d-flex justify-content-center\">\n          \n          {props.pagination.hasOwnProperty('next') ? \n            <button type=\"button\" className=\"btn btn btn-outline-primary align-middle\" onClick={props.nextPage}>\n              <FaAngleDoubleDown />\n            </button>\n            :\n            <button type=\"button\" className=\"btn btn btn-outline-primary disabled\">\n              <FaAngleDoubleDown />\n            </button>}\n        </div>\n\n        /*<ul className=\"pagination justify-content-center\">\n          {props.pagination.hasOwnProperty('prev') ? \n              <li className=\"page-item\"><a className=\"page-link\" onClick={props.previousPage} tabIndex=\"-1\">Previous</a></li> :\n              <li className=\"page-item disabled\"><a className=\"page-link\" href=\"#\" tabIndex=\"-1\">Previous</a></li>\n          }\n          <li className=\"page-item\"><a className=\"page-link\" href=\"#\">1</a></li>\n          <li className=\"page-item\"><a className=\"page-link\" href=\"#\">2</a></li>\n          <li className=\"page-item\"><a className=\"page-link\" href=\"#\">3</a></li>\n          {props.pagination.hasOwnProperty('next') ? \n              <li className=\"page-item\"><a className=\"page-link\" onClick={props.nextPage} tabIndex=\"-1\">Next</a></li> :\n              <li className=\"page-item disabled\"><a className=\"page-link\" tabIndex=\"-1\">Next</a></li>\n          }\n        </ul>*/\n        : null}\n      </nav>\n  );\n}\n\nfunction PaginationNext(props) {\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}